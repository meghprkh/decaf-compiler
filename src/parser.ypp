%{
#include <stdio.h>
#include "ast/all.hpp"

extern FILE *yyin;
extern int yylex (void);
void yyerror (const char *s);
int lineno = 0;

class Base* start;
extern union Node yylval;
int pidcount;
vector<pair<int, int> > errors;

%}

%token BOOLEAN BREAK CALLOUT CLASS CONTINUE ELSE FOR IF INT RETURN VOID
%token <token> ID
%token <token> STRING_LITERAL INT_LITERAL CHAR_LITERAL BOOL_LITERAL
%token ASSIGN_EQ ASSIGN_PE ASSIGN_ME

%left OR
%left AND
%left EQ NE
%left LT LE GE GT
%left '+' '-'
%left '*' '/' '%'
%nonassoc '!'

%type <base> program

%type <field_decls> field_decls;
%type <field_decl> field_decl;
%type <field_decl_args> field_decl_args;

%type <var_decls> var_decls;
%type <var_decl> var_decl;
%type <var_decl_vars> var_decl_vars;

%type <method_decls> method_decls;
%type <method_decl> method_decl;
%type <method_decl_args> method_decl_args;
%type <method_decl_arg> method_decl_arg;

%type <block> block;
%type <statements> statements;
%type <statement> statement;
%type <assign_op> assign_op;

%type <type> type;

%type <expr> expr
%type <expr> arith_expr
%type <expr> rel_expr
%type <expr> eq_expr
%type <expr> cond_expr
%type <expr> literal
%type <string_literal> string_literal
%type <expr> location
%type <expr> method_call
%type <token> method_name
%type <method_args> method_args
%type <callout_args> callout_args

%%

program
	: CLASS ID '{' field_decls method_decls '}' { $$ = new Program($4, $5); start = $$; }
	;

field_decls
	: field_decls field_decl   { $$ = $1; $$->add($2); }
	| %empty                   { $$ = new FieldDecls(); }
	;

field_decl
	: type field_decl_args ';' { $$ = new FieldDecl($1, $2); }
	;

field_decl_args
	: ID ',' field_decl_args                        { $$ = $3; $$->add($1); }
	| ID '[' INT_LITERAL ']' ',' field_decl_args    { $$ = $6; $$->add($1, $3); }
	| ID                               { $$ = new FieldDeclArgs(); $$->add($1); }
	| ID '[' INT_LITERAL ']'       { $$ = new FieldDeclArgs(); $$->add($1, $3); }
	;

type
	: INT        { $$ = Type::_int; }
	| BOOLEAN    { $$ = Type::_boolean; }
	;

method_decls
	: method_decl method_decls   { $$ = $2; $$->add($1); }
	| %empty                     { $$ = new MethodDecls(); }
	;

method_decl
	: type ID '(' method_decl_args ')' block  { $$ = new MethodDecl($1, $2, $4, $6); }
	| VOID ID '(' method_decl_args ')' block  { $$ = new MethodDecl($2, $4, $6); }
	;

method_decl_args
	: method_decl_arg ',' method_decl_args    { $$ = $3; $$->add($1); }
	| method_decl_arg                         { $$ = new MethodDeclArgs(); $$->add($1); }
	| %empty                                  { $$ = new MethodDeclArgs(); }
	;

method_decl_arg
	: type ID      { $$ = new MethodDeclArg($1, $2); }
	;

block
	: '{' var_decls statements '}'   { $$ = new Block($2, $3); }
	;

var_decls
	: var_decl var_decls       { $$ = $2; $$->add($1); }
	| %empty                   { $$ = new VarDecls(); }
	;

var_decl
	: type var_decl_vars ';'   { $$ = new VarDecl($1, $2); }
	;

var_decl_vars
	: ID ',' var_decl_vars     { $$ = $3; $$->add($1); }
	| ID                       { $$ = new VarDeclVars(); $$->add($1); }
	;

statements
	: statement statements     { $$ = $2; $$->add($1); }
	| %empty                   { $$ = new StatementsList(); }
	;

statement
	: location assign_op expr ';'       { $$ = new AssignStatement((Location*) $1, $2, $3); }
	| method_call ';'                   { $$ = new MethodCallStatement((MethodCall*) $1); }
	| IF '(' expr ')' block ELSE block  { $$ = new IfStatement($3, $5, $7); }
	| IF '(' expr ')' block             { $$ = new IfStatement($3, $5); }
	| FOR ID ASSIGN_EQ expr ',' expr block {
	                                      $$ = new LoopStatement($2, $4, $6, $7); }
	| RETURN expr ';'                   { $$ = new ReturnStatement($2); }
	| RETURN ';'                        { $$ = new ReturnStatement(); }
	| BREAK ';'                         { $$ = new BreakStatement(); }
	| CONTINUE ';'                      { $$ = new ContinueStatement(); }
	| block                             { $$ = $1; }
	;

assign_op
	: ASSIGN_EQ     { $$ = AssignOp::eq; }
	| ASSIGN_PE     { $$ = AssignOp::pe; }
	| ASSIGN_ME     { $$ = AssignOp::me; }
	;

expr
	: location          { $$ = $1; }
	| method_call       { $$ = $1; }
	| literal           { $$ = $1; }
	| arith_expr        { $$ = $1; }
	| rel_expr          { $$ = $1; }
	| eq_expr           { $$ = $1; }
	| cond_expr         { $$ = $1; }
	| '-' expr          { $$ = new UnaryMinusExpr($2); }
	| '!' expr          { $$ = new UnaryNotExpr($2); }
	| '(' expr ')'      { $$ = new ParenthizedExpr($2); }
	;

arith_expr
	: expr '+' expr     { $$ = new ArithExpr($1, ArithOp::add, $3); }
	| expr '-' expr     { $$ = new ArithExpr($1, ArithOp::sub, $3); }
	| expr '*' expr     { $$ = new ArithExpr($1, ArithOp::mul, $3); }
	| expr '/' expr     { $$ = new ArithExpr($1, ArithOp::div, $3); }
	| expr '%' expr     { $$ = new ArithExpr($1, ArithOp::mod, $3); }
	;

rel_expr
	: expr LT expr      { $$ = new RelExpr($1, RelOp::lt, $3); }
	| expr GT expr      { $$ = new RelExpr($1, RelOp::gt, $3); }
	| expr LE expr      { $$ = new RelExpr($1, RelOp::le, $3); }
	| expr GE expr      { $$ = new RelExpr($1, RelOp::ge, $3); }
	;

eq_expr
	: expr EQ expr      { $$ = new EqExpr($1, EqOp::eq, $3); }
	| expr NE expr      { $$ = new EqExpr($1, EqOp::ne, $3); }
	;

cond_expr
	: expr AND expr     { $$ = new CondExpr($1, CondOp::_and, $3); }
	| expr OR expr      { $$ = new CondExpr($1, CondOp::_or, $3); }
	;

location
	: ID                { $$ = new VarLocation($1); }
	| ID '[' expr ']'   { $$ = new ArrLocation($1, $3); }
	;

method_call
	: method_name '(' method_args ')'   { $$ = new MethodCall($1, (MethodArgsList*) $3); }
	| CALLOUT '(' STRING_LITERAL ')'    { $$ = new Callout($3, new CalloutArgsList()); }
	| CALLOUT '(' STRING_LITERAL ',' callout_args ')' {
	                                      $$ = new Callout($3, $5); }
	;

method_name: ID       { $$ = $1; };

method_args
	: expr ',' method_args    { $$ = $3; $$->add($1); }
	| expr                    { $$ = new MethodArgsList(); $$->add($1); }
	| %empty                  { $$ = new MethodArgsList(); }
	;

callout_args
	: string_literal ',' callout_args    { $$ = $3; $$->add($1); }
	| expr ',' callout_args              { $$ = $3; $$->add($1); }
	| string_literal                     { $$ = new CalloutArgsList(); $$->add($1); }
	| expr                               { $$ = new CalloutArgsList(); $$->add($1); }
	;

literal
	: INT_LITERAL      { $$ = new IntLiteral($1); }
	| CHAR_LITERAL     { $$ = new CharLiteral($1); }
	| BOOL_LITERAL     { $$ = new BoolLiteral($1); }
	;

string_literal
	: STRING_LITERAL   { $$ = new StringLiteral($1); }
	;

%%

extern int yydebug;
int main(int argc, char **argv)
{
	if (argc == 1 ) {
		fprintf(stderr, "Correct usage: decaf filename\n");
		exit(1);
	}
	if (argc > 2) {
		fprintf(stderr, "Passing more arguments than necessary.\n");
		fprintf(stderr, "Correct usage: decaf filename\n");
	}

	yyin = fopen(argv[1], "r");
	yyparse();

	if (!errors.empty()) {
		for (auto e: errors)
			fprintf(stderr, "error: %d at line %d\n", e.first, e.second);
		exit(1);
	}

	pidcount = 0;
	printf("graph TD\n");
	start->print();
}

void yyerror(const char *s)
{
	fprintf(stderr, "error: %s at line %d\n", s, lineno);
}
