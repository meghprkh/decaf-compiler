%{
#include <stdio.h>
#include "ast/all.hpp"

extern FILE *yyin;
extern int yylex (void);
void yyerror (const char *s);
int lineno = 0;

class Base* start;
extern union Node yylval;
int pidcount;

%}

%token BOOLEAN BREAK CALLOUT CLASS CONTINUE ELSE FOR IF INT RETURN VOID
%token <token> ID
%token <token> STRING_LITERAL INT_LITERAL CHAR_LITERAL BOOL_LITERAL
%token ASSIGN_EQ ASSIGN_PE ASSIGN_ME

%left OR
%left AND
%left EQ NE
%left LT LE GE GT
%left '+' '-'
%left '*' '/' '%'
%nonassoc '!'

%type <base> program
%type <expr> expr
%type <expr> arith_expr
%type <expr> rel_expr
%type <expr> eq_expr
%type <expr> cond_expr
%type <expr> literal
%type <expr> location

%%

program: expr  { $$ = $1; start = $$; }

expr
	: location          { $$ = $1; }
	| method_call
	| literal           { $$ = $1; }
	| arith_expr        { $$ = $1; }
	| rel_expr          { $$ = $1; }
	| eq_expr           { $$ = $1; }
	| cond_expr         { $$ = $1; }
	| '-' expr          { $$ = new UnaryMinusExpr($2); }
	| '!' expr          { $$ = new UnaryNotExpr($2); }
	| '(' expr ')'      { $$ = new ParenthizedExpr($2); }
	;

arith_expr
	: expr '+' expr     { $$ = new ArithExpr($1, ArithOp::add, $3); }
	| expr '-' expr     { $$ = new ArithExpr($1, ArithOp::sub, $3); }
	| expr '*' expr     { $$ = new ArithExpr($1, ArithOp::mul, $3); }
	| expr '/' expr     { $$ = new ArithExpr($1, ArithOp::div, $3); }
	| expr '%' expr     { $$ = new ArithExpr($1, ArithOp::mod, $3); }
	;

rel_expr
	: expr LT expr      { $$ = new RelExpr($1, RelOp::lt, $3); }
	| expr GT expr      { $$ = new RelExpr($1, RelOp::gt, $3); }
	| expr LE expr      { $$ = new RelExpr($1, RelOp::le, $3); }
	| expr GE expr      { $$ = new RelExpr($1, RelOp::ge, $3); }
	;

eq_expr
	: expr EQ expr      { $$ = new EqExpr($1, EqOp::eq, $3); }
	| expr NE expr      { $$ = new EqExpr($1, EqOp::ne, $3); }
	;

cond_expr
	: expr AND expr     { $$ = new CondExpr($1, CondOp::_and, $3); }
	| expr OR expr      { $$ = new CondExpr($1, CondOp::_or, $3); }
	;

location
	: ID                { $$ = new VarLocation($1); }
	| ID '[' expr ']'   { $$ = new ArrLocation($1, $3); }
	;

method_call
	: method_name '(' method_args ')'
	| CALLOUT '(' STRING_LITERAL ')'
	| CALLOUT '(' STRING_LITERAL ',' callout_args ')'
	;

method_name: ID;

method_args
	: expr ',' method_args
	| expr
	| %empty
	;

callout_args
	: STRING_LITERAL ',' callout_args
	| expr ',' callout_args
	| STRING_LITERAL
	| expr
	;

literal
	: INT_LITERAL      { $$ = new IntLiteral($1); }
	| CHAR_LITERAL     { $$ = new CharLiteral($1); }
	| BOOL_LITERAL     { $$ = new BoolLiteral($1); }
	;

%%

extern int yydebug;
int main(int argc, char **argv)
{
	if (argc == 1 ) {
		fprintf(stderr, "Correct usage: decaf filename\n");
		exit(1);
	}
	if (argc > 2) {
		fprintf(stderr, "Passing more arguments than necessary.\n");
		fprintf(stderr, "Correct usage: decaf filename\n");
	}

	yyin = fopen(argv[1], "r");
	yyparse();

	pidcount = 0;
	printf("graph TD\n");
	start->print();
}

void yyerror(const char *s)
{
	fprintf(stderr, "error: %s at line %d\n", s, lineno);
}
